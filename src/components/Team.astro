---
import TeamMemberCard from './TeamMemberCard.astro';

// Interface para la configuración de la tarjeta
interface CardConfiguration {
  id: string;
  userId: string;
  imageSize: number;
  imageLeftOffset?: string;
  bgColor: string;
  textAbove: string;
  textAboveColor: string;
  aboveFontFamily: string;
  aboveFontSize: string;
  aboveFontWeight: string;
  aboveLetterSpacing: string;
  aboveTextTransform: string;
  aboveTextTopOffset: string;
  textBelow: string;
  belowFontWeight: string;
  belowLetterSpacing: string;
  belowFontFamily: string;
  belowFontSize: string;
  belowTextTransform: string;
  textBelowColor: string;
  createdAt: string;
  updatedAt: string;
}

// Interface para un usuario/miembro del equipo
interface TeamMember {
  id: string;
  firstName: string;
  lastName: string;
  email: string;
  isActive: boolean;
  role: string;
  slug: string;
  image: string;
  showCurriculum: boolean;
  createdAt: string;
  updatedAt: string;
  cardConfiguration: CardConfiguration;
  stack?: string[]; // Lista de tecnologías opcional
}

// Interface para la respuesta de la API
interface ApiResponse {
  items: TeamMember[];
  meta: {
    currentPage: number;
    itemsPerPage: number;
    totalItems: number;
    totalPages: number;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
  };
}

// Obtener los miembros del equipo directamente desde nuestro endpoint
let team: TeamMember[] = [];
let error: string | null = null;

try {
  // Llamamos a nuestro propio endpoint interno
  const response = await fetch(new URL('/api/team.json', Astro.url));
  
  if (response.ok) {
    team = await response.json();
  } else {
    throw new Error('Error al obtener los miembros del equipo');
  }
} catch (err) {
  console.error('Error al obtener los miembros del equipo:', err);
  error = 'No se pudieron cargar los miembros del equipo. Usando datos de respaldo.';
}

// Colores de respaldo para miembros sin configuración completa
const bgColors = ["#E8F4F2", "#FFF8E6", "#F0F0F0", "#E6F1FF"];
const textColors = ["#1A4D2E", "#D04848", "#264653", "#444444"];
---

<section id="profesionales" class="py-32 bg-kodeksa-dark/[0.02]">
  <div class="container mx-auto px-6">
    <div class="max-w-2xl mx-auto text-center mb-16">
      <h2 class="text-4xl font-display font-bold text-kodeksa-dark mb-6">Nuestro Equipo</h2>
      <p class="text-kodeksa-dark/70 text-lg">
        Conocé a los profesionales que hacen posible transformar ideas en realidad.
      </p>
      
      {error && (
        <div class="mt-4 text-yellow-600 bg-yellow-50 p-2 rounded">
          {error}
        </div>
      )}
    </div>

    <div class="grid sm:grid-cols-2 lg:grid-cols-4 gap-8">
      {team.map((member, index) => {
        const config = member.cardConfiguration;
        
        return (member.showCurriculum)
        ?
        (
          <a href={`/engineers/${member.slug}`} class="group">
            <TeamMemberCard
              image={member.image}
              altText={`${member.firstName} ${member.lastName}`}
              text_above={config.textAbove}
              text_below={config.textBelow}
              bgColor={config.bgColor || bgColors[index % bgColors.length]}
              textAboveColor={config.textAboveColor || textColors[index % textColors.length]}
              textBelowColor={config.textBelowColor || textColors[index % textColors.length]}
              imageSize={config.imageSize || 90}
              imageLeftOffset={config.imageLeftOffset || "0"}
              aboveFontFamily={config.aboveFontFamily || "'Clash Display', sans-serif"}
              belowFontFamily={config.belowFontFamily || "'JetBrains Mono', sans-serif"}
              aboveFontSize={config.aboveFontSize || "3.5rem"}
              belowFontSize={config.belowFontSize || "1.5rem"}
              aboveFontWeight={config.aboveFontWeight || "700"}
              belowFontWeight={config.belowFontWeight || "700"}
              aboveLetterSpacing={config.aboveLetterSpacing || "0.23em"}
              belowLetterSpacing={config.belowLetterSpacing || "0.35em"}
              aboveTextTransform={config.aboveTextTransform || "uppercase"}
              belowTextTransform={config.belowTextTransform || "uppercase"}
              aboveTextTopOffset={config.aboveTextTopOffset || "0"}
            />
            <div class="space-y-4">
              <div>
                <h3 class="text-xl font-bold text-kodeksa-dark group-hover:text-kodeksa-primary transition-colors">
                  {member.firstName} {member.lastName}
                </h3>
                <p class="text-kodeksa-dark/70">{member.role}</p>
              </div>
              <div class="flex flex-wrap gap-2">
                {member.stack && member.stack.map(tech => (
                  <span class="px-3 py-1 bg-kodeksa-dark/5 text-kodeksa-dark/70 rounded-full text-sm">
                    {tech}
                  </span>
                ))}
              </div>
            </div>
          </a>
        )
        :(<a class="group">
            <TeamMemberCard
              image={member.image}
              altText={`${member.firstName} ${member.lastName}`}
              text_above={config.textAbove}
              text_below={config.textBelow}
              bgColor={config.bgColor || bgColors[index % bgColors.length]}
              textAboveColor={config.textAboveColor || textColors[index % textColors.length]}
              textBelowColor={config.textBelowColor || textColors[index % textColors.length]}
              imageSize={config.imageSize || 90}
              imageLeftOffset={config.imageLeftOffset || "0"}
              aboveFontFamily={config.aboveFontFamily || "'Clash Display', sans-serif"}
              belowFontFamily={config.belowFontFamily || "'JetBrains Mono', sans-serif"}
              aboveFontSize={config.aboveFontSize || "3.5rem"}
              belowFontSize={config.belowFontSize || "1.5rem"}
              aboveFontWeight={config.aboveFontWeight || "700"}
              belowFontWeight={config.belowFontWeight || "700"}
              aboveLetterSpacing={config.aboveLetterSpacing || "0.23em"}
              belowLetterSpacing={config.belowLetterSpacing || "0.35em"}
              aboveTextTransform={config.aboveTextTransform || "uppercase"}
              belowTextTransform={config.belowTextTransform || "uppercase"}
              aboveTextTopOffset={config.aboveTextTopOffset || "0"}
            />
            <div class="space-y-4">
              <div>
                <h3 class="text-xl font-bold text-kodeksa-dark group-hover:text-kodeksa-primary transition-colors">
                  {member.firstName} {member.lastName}
                </h3>
                <p class="text-kodeksa-dark/70">{member.role}</p>
              </div>
              <div class="flex flex-wrap gap-2">
                {member.stack && member.stack.map(tech => (
                  <span class="px-3 py-1 bg-kodeksa-dark/5 text-kodeksa-dark/70 rounded-full text-sm">
                    {tech}
                  </span>
                ))}
              </div>
            </div>
          </a>);
      })}
    </div>
  </div>
</section>