---
// Interfaces para la respuesta de la API
interface BlogSection {
  id: string;
  blogId: string;
  order: number;
  type: 'paragraph' | 'heading' | 'subheading' | 'image' | 'list';
  content: string | null;
  src: string | null;
  alt: string | null;
  caption: string | null;
  style: string | null;
  items: string[] | null;
  createdAt: string;
  updatedAt: string;
}

interface Author {
  name: string;
  avatar: string;
}

interface User {
  id: string;
  firstName: string;
  lastName: string;
  email: string;
  role: string;
  slug: string;
  image: string;
  isActive: boolean;
  showCurriculum: boolean;
  createdAt: string;
  updatedAt: string;
}

interface BlogPost {
  id: string;
  userId: string;
  title: string;
  slug: string;
  image: string;
  shortDescription: string;
  categories: string[];
  isActive: boolean;
  author: Author;
  createdAt: string;
  updatedAt: string;
  sections: BlogSection[];
  user?: User;
}

interface ApiResponse {
  items: BlogPost[];
  meta: {
    currentPage: number;
    itemsPerPage: number;
    totalItems: number;
    totalPages: number;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
  };
}

// Definición de los artículos del blog que usaremos como respaldo
const fallbackPosts:BlogPost[] = [];

// Función para formatear fecha
function formatDate(dateString: string): string {
  const date = new Date(dateString);
  const options: Intl.DateTimeFormatOptions = { day: 'numeric', month: 'long', year: 'numeric' };
  return date.toLocaleDateString('es-ES', options);
}

// Obtener los posts del blog desde nuestra API
let blogPosts = [];
let error = null;

try {
  const apiBaseUrl = import.meta.env.PUBLIC_API_URL || 'http://localhost:3000';
  console.log(`Fetching blog posts from: ${apiBaseUrl}/api/blogs?page=1&limit=4`);
  
  const response = await fetch(`${apiBaseUrl}/api/blogs?page=1&limit=4`);
  
  if (!response.ok) {
    console.error(`API responded with status: ${response.status}`);
    throw new Error('Error al obtener los artículos del blog');
  }
  
  const data: ApiResponse = await response.json();
  
  // Ahora usamos directamente los datos de la API ya que incluyen el autor
  blogPosts = data.items;
  
} catch (err) {
  console.error('Error al obtener artículos del blog:', err);
  error = 'No se pudieron cargar los artículos del blog. Usando datos de respaldo.';
  blogPosts = fallbackPosts;
}
---

<section id="blog" class="py-32">
  <div class="container mx-auto px-6">
    <div class="max-w-2xl mx-auto text-center mb-16">
      <h2 class="text-4xl font-display font-bold text-kodeksa-dark mb-6">Blog</h2>
      <p class="text-kodeksa-dark/70 text-lg">
        Artículos y recursos sobre tecnología, desarrollo y tendencias del sector.
      </p>
      
      {error && (
        <div class="mt-4 text-yellow-600 bg-yellow-50 p-2 rounded">
          {error}
        </div>
      )}
    </div>

    <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
      {blogPosts.map(post => (
        <article class="bg-white rounded-2xl shadow-sm shadow-kodeksa-dark/5 overflow-hidden group flex flex-col h-full">
          <div class="aspect-[16/10] overflow-hidden">
            <img 
              src={post.image} 
              alt={post.title}
              class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
            />
          </div>
          <div class="p-6 flex flex-col flex-grow">
            <div class="flex justify-between items-center text-sm text-kodeksa-dark/60 mb-4">
              <span>{formatDate(post.createdAt)}</span>
              <div class="flex gap-1">
                {post.categories && post.categories.map((category, index) => (
                  <span class="px-3 py-1 bg-kodeksa-dark/5 rounded-full">{category}</span>
                ))}
              </div>
            </div>
            <h3 class="text-xl font-bold text-kodeksa-dark group-hover:text-kodeksa-primary transition-colors mb-4">
              {post.title}
            </h3>
            <p class="text-kodeksa-dark/70 line-clamp-3 mb-4">
              {post.shortDescription}
            </p>
            <div class="mt-auto pt-4 flex justify-between items-center border-t border-kodeksa-dark/10">
              <div class="flex items-center gap-2">
                <img 
                  src={post.author.avatar} 
                  alt={post.author.name}
                  class="w-8 h-8 rounded-full object-contain"
                />
                <span class="text-sm text-kodeksa-dark/70">{post.author.name}</span>
              </div>
              <a 
                href={`/blog/${post.slug}`}
                class="text-kodeksa-primary font-medium flex items-center gap-1 hover:gap-2 transition-all"
              >
                Leer más
                <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="m9 18 6-6-6-6"/>
                </svg>
              </a>
            </div>
          </div>
        </article>
      ))}
    </div>

    <div class="mt-12 text-center">
      <a 
        href="/blog/all"
        class="inline-flex items-center px-6 py-3 border-2 border-kodeksa-dark/10 rounded-full hover:border-kodeksa-primary/20 text-kodeksa-dark font-medium transition-colors"
      >
        Ver todos los artículos
        <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4 ml-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="m9 18 6-6-6-6"/>
        </svg>
      </a>
    </div>
  </div>
</section>

<!-- MODAL PARA ARTÍCULOS -->
<div id="blog-modal" class="fixed inset-0 bg-kodeksa-dark/50 backdrop-blur-sm z-50 hidden">
  <div class="container mx-auto px-6 py-12 h-full overflow-y-auto">
    <div class="bg-white rounded-2xl p-8 max-w-4xl mx-auto">
      <div class="flex justify-between items-start mb-8">
        <div>
          <h3 id="modal-title" class="text-3xl font-display font-bold text-kodeksa-dark mb-2"></h3>
          <div class="flex items-center gap-4 text-sm text-kodeksa-dark/60">
            <span id="modal-date"></span>
            <div id="modal-categories" class="flex flex-wrap gap-1">
              <!-- Las categorías se añadirán dinámicamente aquí -->
            </div>
          </div>
        </div>
        <button
          id="close-blog-button"
          class="text-kodeksa-dark/50 hover:text-kodeksa-dark transition-colors"
          aria-label="Cerrar"
        >
          <svg class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>

      <div id="modal-content" class="prose max-w-none mb-8">
        <!-- El contenido del artículo se cargará aquí dinámicamente -->
      </div>

      <div class="flex items-center gap-4 border-t border-kodeksa-dark/10 pt-6">
        <img 
          id="modal-author-avatar"
          src=""
          alt=""
          class="w-12 h-12 rounded-full object-cover"
        />
        <div>
          <div id="modal-author-name" class="font-bold text-kodeksa-dark"></div>
          <div class="text-sm text-kodeksa-dark/70">Autor</div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  /* Estilos para el contenido del artículo - Corregido */
  .prose {
    max-width: 100%; /* Cambiado de 65ch para evitar espacios extraños */
    color: rgba(21, 21, 21, 0.8);
    font-size: 16px;
    line-height: 1.75;
  }
  
  .prose h3 {
    color: #151515;  /* Color kodeksa-dark */
    font-weight: 700;
    font-size: 1.5rem;
    margin-top: 2rem;
    margin-bottom: 1rem;
    font-family: 'Clash Display', sans-serif;
  }
  
  .prose h4 {
    color: #151515;  /* Color kodeksa-dark */
    font-weight: 600;
    font-size: 1.25rem;
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
  }
  
  .prose p {
    margin-bottom: 1.25rem;
    color: rgba(21, 21, 21, 0.8);  /* kodeksa-dark con opacidad */
  }
  
  .prose ul,
  .prose ol {
    margin-left: 2rem;
    margin-bottom: 1.25rem;
    color: rgba(21, 21, 21, 0.8);
  }
  
  .prose ul {
    list-style-type: disc;
  }
  
  .prose ol {
    list-style-type: decimal;
  }
  
  .prose li {
    margin-bottom: 0.5rem;
  }

  /* Asegura que las listas realmente se muestren con viñetas */
  .prose ul li::before {
    content: "";
    display: none;
  }
  
  /* Clase para limitar el número de líneas en los extractos */
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>

