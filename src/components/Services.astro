---
// Interface para Feature desde la API
interface Feature {
  id: string;
  solutionId: string;
  featureDescription: string;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
}

// Interface para Solution desde la API
interface ApiSolution {
  id: string;
  title: string;
  icon: string;
  description: string;
  isActive: boolean;
  order: number;
  createdAt: string;
  updatedAt: string;
  features: Feature[];
}

// Interface para nuestra estructura interna
interface Solution {
  id: string;
  title: string;
  icon: string;
  description: string;
  features: string[];
}

// Obtener las soluciones directamente desde nuestro endpoint (se ejecuta en cada solicitud)
let services: Solution[] = [];
let error: string | null = null;

try {
  // Llamamos a nuestro propio endpoint interno
  const response = await fetch(new URL('/api/solutions.json', Astro.url));
  
  if (response.ok) {
    services = await response.json();
  } else {
    throw new Error('Error al obtener las soluciones');
  }
} catch (err) {
  console.error('Error al obtener las soluciones:', err);
  error = 'No se pudieron cargar las soluciones. Usando datos de respaldo.';
}

// Servicio activo por defecto
let activeServiceId = services.length > 0 ? services[0].id : "";
---

<section id="servicios" class="py-32 bg-kodeksa-dark/[0.02]">
  <div class="container mx-auto px-6">
    <div class="max-w-2xl mx-auto text-center mb-16">
      <h2 class="text-4xl font-display font-bold text-kodeksa-dark mb-6">
        SOLUCIONES
      </h2>
      <p class="text-kodeksa-dark/70 text-lg">
        Explorá nuestro portfolio de soluciones innovadoras que han transformado negocios.
      </p>
      
      {error && (
        <div class="mt-4 text-yellow-600 bg-yellow-50 p-2 rounded">
          {error}
        </div>
      )}
    </div>

    <div class="grid lg:grid-cols-[1fr,3fr] gap-8">
      <!-- Panel de navegación (botones) -->
      <div class="flex flex-col gap-4">
        {services.map(service => (
          <button
            class="text-left px-6 py-4 rounded-xl border-2 transition-all flex items-center gap-4 service-button group hover:border-kodeksa-primary/20"
            data-service={service.id}
            data-active={service.id === activeServiceId ? "true" : "false"}
          >
            <div class="w-12 h-12 flex items-center justify-center rounded-full bg-kodeksa-dark/5 text-kodeksa-primary group-hover:bg-kodeksa-primary group-hover:text-white transition-colors">
              <Fragment set:html={service.icon} />
            </div>
            <div>
              <h3 class="font-bold text-kodeksa-dark text-xl group-hover:text-kodeksa-primary transition-colors">
                {service.title}
              </h3>
            </div>
          </button>
        ))}
      </div>

      <!-- Panel de contenido -->
      <div class="bg-white rounded-2xl shadow-sm shadow-kodeksa-dark/5 p-8">
        {services.map(service => (
          <div 
            class="service-content space-y-6" 
            data-service={service.id}
            data-active={service.id === activeServiceId ? "true" : "false"}
          >
            <div class="flex items-center gap-4">
              <div class="w-16 h-16 flex items-center justify-center rounded-full bg-kodeksa-primary/10 text-kodeksa-primary">
                <Fragment set:html={service.icon} />
              </div>
              <h3 class="text-2xl font-display font-bold text-kodeksa-dark">{service.title}</h3>
            </div>
            
            <p class="text-kodeksa-dark/70 text-lg leading-relaxed">
              {service.description}
            </p>

            <div class="pt-4">
              <h4 class="text-lg font-bold text-kodeksa-dark mb-4">Características principales:</h4>
              <ul class="grid sm:grid-cols-2 gap-4">
                {service.features.map(feature => (
                  <li class="flex items-start gap-2">
                    <svg class="w-5 h-5 text-kodeksa-primary flex-none mt-0.5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                      <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                      <polyline points="22 4 12 14.01 9 11.01"></polyline>
                    </svg>
                    <span class="text-kodeksa-dark/70">{feature}</span>
                  </li>
                ))}
              </ul>
            </div>

            <div class="pt-4">
              <a 
                href="#contacto" 
                class="inline-flex items-center px-6 py-3 bg-kodeksa-primary text-white rounded-full hover:bg-kodeksa-primary/90 transition-colors text-sm font-medium"
              >
                Consultar por este servicio
                <svg class="ml-2 w-5 h-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="m9 18 6-6-6-6"></path>
                </svg>
              </a>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</section>

<style>
  /* Estilos para los botones activos */
  .service-button[data-active="true"] {
    border-color: var(--color-kodeksa-primary);
    background-color: rgba(26, 77, 46, 0.05);
  }

  .service-button[data-active="true"] h3 {
    color: var(--color-kodeksa-primary);
  }

  /* Esconder contenido inactivo */
  .service-content[data-active="false"] {
    display: none;
  }

  .service-content[data-active="true"] {
    display: block;
  }
</style>

<script>
  // Función para activar un servicio
  function activateService(serviceId: string) {
    // Desactivar todos los botones y contenidos
    document.querySelectorAll('.service-button').forEach(button => {
      button.setAttribute('data-active', 'false');
    });
    
    document.querySelectorAll('.service-content').forEach(content => {
      content.setAttribute('data-active', 'false');
    });
    
    // Activar el botón y contenido seleccionado
    document.querySelector(`.service-button[data-service="${serviceId}"]`)?.setAttribute('data-active', 'true');
    document.querySelector(`.service-content[data-service="${serviceId}"]`)?.setAttribute('data-active', 'true');
  }

  // Agregar event listeners a los botones
  document.querySelectorAll('.service-button').forEach(button => {
    button.addEventListener('click', () => {
      const serviceId = button.getAttribute('data-service');
      if (serviceId) {
        activateService(serviceId);
      }
    });
  });
</script>