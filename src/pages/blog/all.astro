---
import Layout from '../../layouts/Layout.astro';
import Navbar from '../../components/Navbar.astro';
import Footer from '../../components/Footer.astro';

// Interfaces para la respuesta de la API
interface BlogSection {
  id: string;
  blogId: string;
  order: number;
  type: 'paragraph' | 'heading' | 'subheading' | 'image' | 'list';
  content: string | null;
  src: string | null;
  alt: string | null;
  caption: string | null;
  style: string | null;
  items: string[] | null;
  createdAt: string;
  updatedAt: string;
}

interface Author {
  name: string;
  avatar: string;
  role: string;
}



interface BlogPost {
  id: string;
  userId: string;
  title: string;
  slug: string;
  image: string;
  shortDescription: string;
  categories: string[];
  isActive: boolean;
  author: Author;
  createdAt: string;
  updatedAt: string;
  sections?: BlogSection[];
}

interface ApiResponse {
  items: BlogPost[];
  meta: {
    currentPage: number;
    itemsPerPage: number;
    totalItems: number;
    totalPages: number;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
  };
}

// Función para formatear fecha
function formatDate(dateString: string): string {
  const date = new Date(dateString);
  const options: Intl.DateTimeFormatOptions = { day: 'numeric', month: 'long', year: 'numeric' };
  return date.toLocaleDateString('es-ES', options);
}

// Obtener los posts del blog desde la API
let blogPosts: BlogPost[] = [];
let categories: string[] = ['Todos'];
let pagination = {
  currentPage: 1,
  totalPages: 1,
  hasNextPage: false,
  hasPreviousPage: false
};
let error = null;

try {
  const apiBaseUrl = import.meta.env.PUBLIC_API_URL || 'http://localhost:3000';
  console.log(`Fetching blog posts from: ${apiBaseUrl}/api/blogs?page=1&limit=10&includeSections=true`);
  
  const response = await fetch(`${apiBaseUrl}/api/blogs?page=1&limit=10&includeSections=true`);
  
  if (!response.ok) {
    throw new Error('Error al obtener los artículos del blog');
  }
  
  const data: ApiResponse = await response.json();
  
  blogPosts = data.items;
  pagination = {
    currentPage: data.meta.currentPage,
    totalPages: data.meta.totalPages,
    hasNextPage: data.meta.hasNextPage,
    hasPreviousPage: data.meta.hasPreviousPage
  };
  
  // Extraer categorías únicas de todos los posts
  const allCategories = [...new Set(blogPosts.flatMap(post => post.categories || []))];
  categories = ['Todos', ...allCategories.sort()];
  
} catch (err) {
  console.error('Error al obtener artículos del blog:', err);
  error = 'No se pudieron cargar los artículos del blog.';
  
  // Datos de respaldo en caso de error
  blogPosts = [];
  
  // Extraer categorías únicas de los posts de respaldo
  const allCategories = [...new Set(blogPosts.flatMap(post => post.categories || []))];
  categories = ['Todos', ...allCategories.sort()];
}
---

<Layout title="Blog - Kodeksa" description="Artículos y recursos sobre tecnología, desarrollo y tendencias del sector.">
  <Navbar />
  
  <main class="pt-32 pb-20">
    <div class="container mx-auto px-6">
      <div class="max-w-3xl mx-auto text-center mb-16">
        <h1 class="text-5xl font-display font-bold text-kodeksa-dark mb-6">Blog</h1>
        <p class="text-kodeksa-dark/70 text-xl">
          Artículos y recursos sobre tecnología, desarrollo y tendencias del sector.
        </p>
        
        {error && (
          <div class="mt-4 text-yellow-600 bg-yellow-50 p-2 rounded">
            {error}
          </div>
        )}
      </div>
      
      <!-- Filtro por categorías generado dinámicamente --> 
      <div class="flex justify-center flex-wrap gap-4 mb-12 pb-4">
        {categories.map(category => (
          <button
            class="px-6 py-2 rounded-full text-kodeksa-dark/70 hover:text-kodeksa-primary transition-colors font-medium data-[active=true]:bg-kodeksa-primary data-[active=true]:text-white"
            data-category={category}
            data-active={category === 'Todos'}
          >
            {category}
          </button>
        ))}
      </div>
      
      <!-- Artículos de blog -->
      <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
        {blogPosts.map(post => (
          <article 
            class="bg-white rounded-2xl shadow-sm shadow-kodeksa-dark/5 overflow-hidden group flex flex-col h-full"
            data-categories={post.categories ? post.categories.join(',') : ''}
          >
            <div class="aspect-[16/10] overflow-hidden">
              <img 
                src={post.image || `/images/blog/default.jpg`} 
                alt={post.title}
                class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
              />
            </div>
            <div class="p-6 flex flex-col flex-grow">
              <div class="flex justify-between items-start text-sm mb-4">
                <span class="text-kodeksa-dark/60">{formatDate(post.createdAt)}</span>
                <div class="flex flex-wrap gap-2 justify-end">
                  {post.categories && post.categories.map(category => (
                    <span class="px-3 py-1 bg-kodeksa-dark/5 rounded-full text-kodeksa-dark/70">{category}</span>
                  ))}
                </div>
              </div>
              <h3 class="text-xl font-bold text-kodeksa-dark group-hover:text-kodeksa-primary transition-colors mb-4">
                {post.title}
              </h3>
              <p class="text-kodeksa-dark/70 line-clamp-3 mb-4">
                {post.shortDescription}
              </p>
              <div class="mt-auto pt-4 flex justify-between items-center border-t border-kodeksa-dark/10">
                <div class="flex items-center gap-2">
                  <img 
                    src={post.author?.avatar ?? '/images/team/default-avatar.png'} 
                    alt={post.author?.name ??'Autor Desconocido'}
                    class="w-8 h-8 rounded-full object-contain"
                  />
                  <span class="text-sm text-kodeksa-dark/70">
                    {post.author?.name ?? 'Autor Desconocido'}
                  </span>
                </div>
                <a 
                  href={`/blog/${post.slug}`}
                  class="text-kodeksa-primary font-medium flex items-center gap-1 hover:gap-2 transition-all"
                >
                  Leer más
                  <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="m9 18 6-6-6-6"/>
                  </svg>
                </a>
              </div>
            </div>
          </article>
        ))}
      </div>
      
      <!-- Paginación -->
      {pagination.totalPages > 1 && (
        <div class="flex justify-center gap-2 mt-12">
          <a 
            href={pagination.hasPreviousPage ? `/blog/all?page=${pagination.currentPage - 1}` : '#'} 
            class={`px-4 py-2 rounded-lg ${pagination.hasPreviousPage ? 'bg-kodeksa-dark/5 hover:bg-kodeksa-primary hover:text-white' : 'bg-kodeksa-dark/5 opacity-50 cursor-not-allowed'} transition-colors`}
            aria-disabled={!pagination.hasPreviousPage}
          >
            Anterior
          </a>
          
          {Array.from({ length: pagination.totalPages }, (_, i) => (
            <a 
              href={`/blog/all?page=${i + 1}`} 
              class={`px-4 py-2 rounded-lg transition-colors ${pagination.currentPage === i + 1 ? 'bg-kodeksa-primary text-white' : 'bg-kodeksa-dark/5 hover:bg-kodeksa-primary/20'}`}
            >
              {i + 1}
            </a>
          ))}
          
          <a 
            href={pagination.hasNextPage ? `/blog/all?page=${pagination.currentPage + 1}` : '#'} 
            class={`px-4 py-2 rounded-lg ${pagination.hasNextPage ? 'bg-kodeksa-dark/5 hover:bg-kodeksa-primary hover:text-white' : 'bg-kodeksa-dark/5 opacity-50 cursor-not-allowed'} transition-colors`}
            aria-disabled={!pagination.hasNextPage}
          >
            Siguiente
          </a>
        </div>
      )}
    </div>
  </main>
  
  <Footer />
</Layout>

<script>
  // Filtrado por categorías
  document.addEventListener('DOMContentLoaded', () => {
    const categoryButtons = document.querySelectorAll('[data-category]');
    const articles = document.querySelectorAll('article[data-categories]');
  
    categoryButtons.forEach(button => {
      button.addEventListener('click', () => {
        const category = button.getAttribute('data-category');
      
        // Actualizar botones activos
        categoryButtons.forEach(btn => btn.setAttribute('data-active', 'false'));
        button.setAttribute('data-active', 'true');
      
        // Filtrar artículos
        articles.forEach((article:any) => {
          const articleCategories = article.getAttribute('data-categories')?.split(',') || [];
          if (category === 'Todos' || articleCategories.includes(category)) {
            article.style.display = 'flex';
          } else {
            article.style.display = 'none';
          }
        });
      });
    });
    
    // Manejar parámetros de URL para la paginación
    const urlParams = new URLSearchParams(window.location.search);
    const page = urlParams.get('page');
    
    if (page) {
      const pageLinks = document.querySelectorAll('a[href^="/blog/all?page="]');
      pageLinks.forEach(link => {
        if (link.getAttribute('href')?.includes(`page=${page}`)) {
          link.classList.add('bg-kodeksa-primary', 'text-white');
          link.classList.remove('bg-kodeksa-dark/5', 'hover:bg-kodeksa-primary/20');
        }
      });
    }
  });
</script>

<style>
  /* Clase para limitar el número de líneas en los extractos */
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>